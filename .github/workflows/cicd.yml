# Basic CI/CD workflow that builds and tests a Go function, and then deploys it to Azure.
# Pull requests result in a deployed application that is removed when the pull request is
# closed.
#
# First create a service principal in Azure: https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
  push:
    branches:
      - 'main'

permissions:
  id-token: write
  contents: read

env:
  CosmosDatabase: mydatabase
  CosmosCollection: mycollection
  Location: westeurope

jobs:
  build:
    if: >-
      github.event_name == 'push' ||
      github.event.pull_request.state == 'open'
    # Compile with the OS used by Azure Functions: https://github.com/Azure/azure-functions-docker
    runs-on: debian-11
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: 'stable'
    - run: GOOS=linux GOARCH=amd64 go build -v
    - uses: actions/upload-artifact@v3.1.1
      with:
        path: |
          host.json
          go-azure-function
          HttpExample/*
  testdeploy:
    needs: build
    environment: test
    runs-on: ubuntu-latest
    env:
      ResourceGroup: go-azure-function-test${{ github.event.pull_request.number }}-rg
      StorageAccount: goazurefunctiontest${{ github.event.pull_request.number }}sa
      FunctionApp: goazurefunctiontest${{ github.event.pull_request.number }}fa
      CosmosAccount: goazurefunctiontest${{ github.event.pull_request.number }}cosmos
    steps:
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - run: az group create --location $Location --name $ResourceGroup
    - run: az storage account create --name $StorageAccount --location $Location --resource-group $ResourceGroup --sku Standard_LRS
    - run: az functionapp create --name $FunctionApp --storage-account $StorageAccount --consumption-plan-location $Location --resource-group $ResourceGroup --functions-version 4 --os-type Linux --assign-identity --https-only true --runtime custom
    - run: az cosmosdb create --kind GlobalDocumentDB --locations regionName=$Location failoverPriority=0 isZoneRedundant=False --resource-group $ResourceGroup --name $CosmosAccount --capabilities EnableServerless --backup-policy-type Continuous
    - run: az cosmosdb sql database create --account-name $CosmosAccount --name $CosmosDatabase --resource-group $ResourceGroup
    - run: az cosmosdb sql container create --account-name $CosmosAccount --database-name $CosmosDatabase --name $CosmosCollection --partition-key-path "/id" --resource-group $ResourceGroup
    #- run: az cosmosdb sql role assignment create --account-name $CosmosAccount --resource-group $ResourceGroup --scope "/" --role-definition-name "Contributor" --principal-id $(az functionapp identity show --name $FunctionApp --resource-group $ResourceGroup --query principalId)
    - run: az functionapp config appsettings set --name $FunctionApp --resource-group $ResourceGroup --settings "CosmosDBConnectionString=$(az cosmosdb keys list --type connection-strings --name $CosmosAccount --resource-group $ResourceGroup --query connectionStrings[0].connectionString --output tsv)" --query "[name]"
    - uses: actions/download-artifact@v3
    - uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.FunctionApp }}
        package: artifact
    - run: az logout
      if: ${{ always() }}
  test:
    needs: testdeploy
    runs-on: ubuntu-latest
    env:
      FunctionApp: goazurefunctiontest${{ github.event.pull_request.number }}fa
    steps:
    - uses: actions/checkout@v3
    - uses: matt-ball/newman-action@master
      with:
        collection: goazurefunction.postman_collection.json
        environment: test.postman_environment.json
        envVar: '[{"key": "functionapp", "value": "${{ env.FunctionApp }}"}]'
  cleanup:
    if: github.event.pull_request.state == 'closed'
    environment: test
    runs-on: ubuntu-latest
    env:
      ResourceGroup: go-azure-function-test${{ github.event.pull_request.number }}-rg
    steps:
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - run: az group delete --yes --no-wait --name $ResourceGroup
    - run: az logout
      if: ${{ always() }}
  production:
    if: github.event_name == 'push'
    needs: test
    environment: production
    runs-on: ubuntu-latest
    env:
      ResourceGroup: go-azure-function-prod-rg
      StorageAccount: goazurefunctionprodsa
      FunctionApp: goazurefunctionprodfa
      CosmosAccount: goazurefunctionprodcosmos
    steps:
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - run: az group create --location $Location --name $ResourceGroup
    - run: az storage account create --name $StorageAccount --location $Location --resource-group $ResourceGroup --sku Standard_LRS
    - run: az functionapp create --name $FunctionApp --storage-account $StorageAccount --consumption-plan-location $Location --resource-group $ResourceGroup --functions-version 4 --os-type Linux --assign-identity --https-only true --runtime custom
    - run: az cosmosdb create --kind GlobalDocumentDB --locations regionName=$Location failoverPriority=0 isZoneRedundant=False --resource-group $ResourceGroup --name $CosmosAccount --capabilities EnableServerless --backup-policy-type Continuous
    - run: az cosmosdb sql database create --account-name $CosmosAccount --name $CosmosDatabase --resource-group $ResourceGroup
    - run: az cosmosdb sql container create --account-name $CosmosAccount --database-name $CosmosDatabase --name $CosmosCollection --partition-key-path "/id" --resource-group $ResourceGroup
    #- run: az cosmosdb sql role assignment create --account-name $CosmosAccount --resource-group $ResourceGroup --scope "/" --role-definition-name "Contributor" --principal-id $(az functionapp identity show --name $FunctionApp --resource-group $ResourceGroup --query principalId)
    - run: az functionapp config appsettings set --name $FunctionApp --resource-group $ResourceGroup --settings "CosmosDBConnectionString=$(az cosmosdb keys list --type connection-strings --name $CosmosAccount --resource-group $ResourceGroup --query connectionStrings[0].connectionString --output tsv)" --query "[name]"
    - uses: actions/download-artifact@v3
    - uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.FunctionApp }}
        package: artifact
    - run: wget --method POST https://$FunctionApp.azurewebsites.net/api/HttpExample?name=GitHub
    - run: az logout
      if: ${{ always() }}
